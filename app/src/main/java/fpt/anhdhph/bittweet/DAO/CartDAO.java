package fpt.anhdhph.bittweet.DAO;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;

import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.List;

import fpt.anhdhph.bittweet.model.CartItem;

public class CartDAO {

    private final FirebaseFirestore db;
    private final Context context;

    public CartDAO(Context context) {
        this.context = context.getApplicationContext(); // üîÅ Lu√¥n n√™n d√πng getApplicationContext() ƒë·ªÉ tr√°nh memory leak
        db = FirebaseFirestore.getInstance();
    }

    // ‚úÖ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (d√πng idOrders t·ª´ SharedPreferences)
    public void addToCart(CartItem item) {
        SharedPreferences prefs = context.getSharedPreferences("MyApp", Context.MODE_PRIVATE);
        String userId = prefs.getString("documentId", null);

        if (userId == null) {
            Log.e("CartDAO", "‚ùå Kh√¥ng t√¨m th·∫•y documentId trong SharedPreferences");
            return;
        }

        String cartId = "cart_" + userId;
        item.setIdOrders(cartId); // G√°n ƒë√∫ng ID ƒë∆°n h√†ng

        db.collection("OrdersDetail")
                .add(item)
                .addOnSuccessListener(documentReference ->
                        Log.d("CartDAO", "‚úÖ Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng: " + item.getName() + " - size: " + item.getSize()))
                .addOnFailureListener(e ->
                        Log.e("CartDAO", "‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng", e));
    }

    // ‚úÖ L·∫•y danh s√°ch gi·ªè h√†ng
    public void getCartItems(OnCartItemsLoadedListener listener) {
        SharedPreferences prefs = context.getSharedPreferences("MyApp", Context.MODE_PRIVATE);
        String userId = prefs.getString("documentId", null);
        Log.d("CartDAO", "üßæ userId t·ª´ SharedPreferences = " + userId);

        if (userId == null) {
            Log.e("CartDAO", "‚ùå Kh√¥ng t√¨m th·∫•y documentId trong SharedPreferences");
            listener.onCartItemsLoaded(new ArrayList<>());
            return;
        }

        String cartId = "cart_" + userId;
        Log.d("CartDAO", "üì• ƒêang l·∫•y gi·ªè h√†ng v·ªõi idOrders = " + cartId);

        db.collection("OrdersDetail")
                .whereEqualTo("idOrders", cartId)
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    List<CartItem> cartItems = new ArrayList<>();
                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                        try {
                            CartItem item = doc.toObject(CartItem.class);
                            Log.d("CartDAO", "üì¶ ƒê√£ l·∫•y item: " + item.getName() + " - size: " + item.getSize());
                            cartItems.add(item);
                        } catch (Exception e) {
                            Log.e("CartDAO", "‚ùå L·ªói khi convert document th√†nh CartItem", e);
                        }
                    }
                    listener.onCartItemsLoaded(cartItems);
                })
                .addOnFailureListener(e -> {
                    Log.e("CartDAO", "‚ùå L·ªói khi l·∫•y gi·ªè h√†ng", e);
                    listener.onCartItemsLoaded(new ArrayList<>());
                });
    }

    // ‚úÖ Interface callback ƒë·ªÉ x·ª≠ l√Ω danh s√°ch gi·ªè h√†ng sau khi l·∫•y
    public interface OnCartItemsLoadedListener {
        void onCartItemsLoaded(List<CartItem> cartItems);
    }
}
